<xs:schema xmlns:ctl="http://www.occamlab.com/ctl">
  <suite name="SearchTest_Conformance">
    <title>SearchTest_Conformance</title>
    <starting-test>SearchTest_Conformance:base_test</starting-test>
  </suite>
  <test name="SearchTest_Conformance::base_test">
    <assertion>base main</assertion>
    <code>
      <call-test>SearchTest_Conformance::s000_compare_supported_search_parameters_with_specification_test</call-test>
      <call-test>SearchTest_Conformance::s001_search_by_id_test</call-test>
      <call-test>SearchTest_Conformance::s002_search_without_search_keyword_test</call-test>
      <call-test>SearchTest_Conformance::s003_search_limit_by__count_test</call-test>
      <call-test>SearchTest_Conformance::se01_search_without_criteria_test</call-test>
    </code>
  </test>
  <test name="SearchTest_Conformance::s000_compare_supported_search_parameters_with_specification_test" id="S000_Conformance">
    <code>if @conformance.nil?
          @conformance = @client.conformanceStatement
        end

        @canSearchById = false

        @conformance.rest.each do |rest|
          rest.resource.each do |resource|
            @searchParams = resource.searchParam if(resource.fhirType.downcase == "#{@resource_class.name.demodulize.downcase}" )
          end
        end

        index = @searchParams.find_index {|item| item.name=="_id" } if !@searchParams.nil?
        @canSearchById = !index.nil?

         searchParamNames = []
        searchParamNames = @searchParams.map { |item| item.name } if !@searchParams.nil?
        assert_equal 0, (@resource_class::SEARCH_PARAMS - searchParamNames).size, 'The server does not support searching all the parameters specified by the specification.' , (@resource_class::SEARCH_PARAMS - searchParamNames).join(', ')</code>
    <context>Compare supported search parameters with specification Conformance</context>
    <assertion>Asserts False: The server does not support searching all the parameters specified by the specification.</assertion>
  </test>
  <test name="SearchTest_Conformance::s001_search_by_id_test" id="S001_Conformance">
    <code>if @conformance.nil?
          @conformance = @client.conformanceStatement
        end

        @canSearchById = false

        @conformance.rest.each do |rest|
          rest.resource.each do |resource|
            @searchParams = resource.searchParam if(resource.fhirType.downcase == "#{@resource_class.name.demodulize.downcase}" )
          end
        end

        index = @searchParams.find_index {|item| item.name=="_id" } if !@searchParams.nil?
        @canSearchById = !index.nil?

         options = {
          :search =&gt; {
            :flag =&gt; true,
            :compartment =&gt; nil,
            :parameters =&gt; {
              '_id' =&gt; '0'
            }
          }
        }
        reply = @client.search(@resource_class, options)
        assert_response_ok(reply)
        assert_bundle_response(reply)</code>
    <context>Search by ID Conformance</context>
    <assertion></assertion>
  </test>
  <test name="SearchTest_Conformance::s002_search_without_search_keyword_test" id="S002_Conformance">
    <code>if @conformance.nil?
          @conformance = @client.conformanceStatement
        end

        @canSearchById = false

        @conformance.rest.each do |rest|
          rest.resource.each do |resource|
            @searchParams = resource.searchParam if(resource.fhirType.downcase == "#{@resource_class.name.demodulize.downcase}" )
          end
        end

        index = @searchParams.find_index {|item| item.name=="_id" } if !@searchParams.nil?
        @canSearchById = !index.nil?

         options = {
          :search =&gt; {
            :flag =&gt; false,
            :compartment =&gt; nil,
            :parameters =&gt; {
              '_id' =&gt; '0'
            }
          }
        }
        reply = @client.search(@resource_class, options)
        assert_response_ok(reply)
        assert_bundle_response(reply)</code>
    <context>Search without search keyword Conformance</context>
    <assertion></assertion>
  </test>
  <test name="SearchTest_Conformance::s003_search_limit_by__count_test" id="S003_Conformance">
    <code>if @conformance.nil?
          @conformance = @client.conformanceStatement
        end

        @canSearchById = false

        @conformance.rest.each do |rest|
          rest.resource.each do |resource|
            @searchParams = resource.searchParam if(resource.fhirType.downcase == "#{@resource_class.name.demodulize.downcase}" )
          end
        end

        index = @searchParams.find_index {|item| item.name=="_id" } if !@searchParams.nil?
        @canSearchById = !index.nil?

         options = {
          :search =&gt; {
            :flag =&gt; true,
            :compartment =&gt; nil,
            :parameters =&gt; {
              '_count' =&gt; '1'
            }
          }
        }
        reply = @client.search(@resource_class, options)
        assert_response_ok(reply)
        assert_bundle_response(reply)
        assert (1 &gt;= reply.resource.entry.size), 'The server did not return the correct number of results.'</code>
    <context>Search limit by _count Conformance</context>
    <assertion>Asserts False: The server did not return the correct number of results.</assertion>
  </test>
  <test name="SearchTest_Conformance::se01_search_without_criteria_test" id="SE01_Conformance">
    <code>if @conformance.nil?
          @conformance = @client.conformanceStatement
        end

        @canSearchById = false

        @conformance.rest.each do |rest|
          rest.resource.each do |resource|
            @searchParams = resource.searchParam if(resource.fhirType.downcase == "#{@resource_class.name.demodulize.downcase}" )
          end
        end

        index = @searchParams.find_index {|item| item.name=="_id" } if !@searchParams.nil?
        @canSearchById = !index.nil?

         options = {
          :search =&gt; {
            :flag =&gt; true,
            :compartment =&gt; nil,
            :parameters =&gt; nil
          }
        }
        reply = @client.search(@resource_class, options)
        assert_response_ok(reply)
        assert_bundle_response(reply)

        replyB = @client.read_feed(@resource_class)
        assert_equal replyB.resource.total, reply.resource.total, 'Searching without criteria did not return all the results.'</code>
    <context>Search without criteria Conformance</context>
    <assertion>Asserts False: Searching without criteria did not return all the results.</assertion>
  </test>
</xs:schema>
