<xs:schema xmlns:ctl="http://www.occamlab.com/ctl">
  <suite name="HistoryTest">
    <title:HistoryTest/>
    <starting-test>HistoryTest:base_test</starting-test>
  </suite>
  <test name="HistoryTest::base_test">
    <assertion>base main</assertion>
    <code>
      <call-test>HistoryTest::hi01_history_for_specific_resource_test</call-test>
      <call-test>HistoryTest::hi02_full_history_of_a_resource_by_id_with_since_test</call-test>
      <call-test>HistoryTest::hi03_individual_history_versions_test</call-test>
      <call-test>HistoryTest::hi04_history_for_missing_resource_test</call-test>
      <call-test>HistoryTest::hi06_all_history_for_resource_with_since_test</call-test>
      <call-test>HistoryTest::hi08_all_history_whole_system_with_since_test</call-test>
      <call-test>HistoryTest::hi09_resource_history_page_forward_test</call-test>
      <call-test>HistoryTest::hi10_resource_history_page_backwards_test</call-test>
      <call-test>HistoryTest::hi11_first_page_full_history_test</call-test>
    </code>
  </test>
  <test name="HistoryTest::hi01_history_for_specific_resource_test" id="HI01">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: "Patient", methods: ["history-instance"]
        }

        result = @client.resource_instance_history(FHIR::Patient,@id)
        assert_response_ok result
        assert_equal @version_count, result.resource.total, "the number of returned versions is not correct"
        assert_equal @entry_count, result.resource.entry.map(&amp;:self_link).size, "all of the returned entries must have a self link"
        check_sort_order(result.resource.entry)</code>
    <context>History for specific resource</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-INSTANCE methods on Patient
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: the number of returned versions is not correct
Asserts False: all of the returned entries must have a self link</assertion>
  </test>
  <test name="HistoryTest::hi02_full_history_of_a_resource_by_id_with_since_test" id="HI02">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: "Patient", methods: ["history-instance"]
        }

        before = @create_date - 1.minute
        after = before + 1.hour

        all_history = @client.resource_instance_history(FHIR::Patient,@id)

        result = @client.resource_instance_history_as_of(FHIR::Patient,@id,before)
        assert_response_ok result
        assert_equal @version_count, result.resource.total, "the number of returned versions since the creation date is not correct"

        entry_ids_are_present_and_absolute_urls(result.resource.entry)
        check_sort_order(result.resource.entry)

        selfs = result.resource.entry.map(&amp;:self_link).compact
        warning { assert_equal @entry_count, (all_history.resource.entry.select {|e| selfs.include? e.self_link}).size, "there are entries missing "}

        result = @client.resource_instance_history_as_of(FHIR::Patient,@id,after)
        assert_response_ok result
        assert_equal 0, result.resource.total, "there should not be any history one hour after the creation date"</code>
    <context>full history of a resource by id with since</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-INSTANCE methods on Patient
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: the number of returned versions since the creation date is not correct
Asserts False: there are entries missing 
Asserts False: there should not be any history one hour after the creation date</assertion>
  </test>
  <test name="HistoryTest::hi03_individual_history_versions_test" id="HI03">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: "Patient", methods: ["vread", "history-instance"]
        }

        result = @client.resource_instance_history(FHIR::Patient,@id)
        assert_response_ok result
        active_entries(result.resource.entry).each do |entry|
          pulled = @client.vread(FHIR::Patient, entry.resource_id, entry.resource_version)
          assert_response_ok pulled
          assert !pulled.nil?, "Cannot find version that was present in history"
          assert url?(pulled.self_link), "#{pulled.self_link} is not a valid url" if pulled.self_link
        end

        deleted_entries(result.resource.entry).each do |entry|
          pulled = @client.vread(FHIR::Patient, entry.resource_id, entry.resource_version)
          assert pulled.resource.nil?, "resource should not be found since it was deleted"
          assert_response_gone pulled
        end</code>
    <context>individual history versions</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the VREAD,HISTORY-INSTANCE methods on Patient
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: Cannot find version that was present in history
Asserts False: #{pulled.self_link} is not a valid url
Asserts False: resource should not be found since it was deleted</assertion>
  </test>
  <test name="HistoryTest::hi04_history_for_missing_resource_test" id="HI04">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: "Patient", methods: ["history-instance"]
        }

        result = @client.resource_instance_history(FHIR::Patient,'3141592unlikely')
        assert_response_not_found result
        assert result.resource.nil?, 'bad history request should not return a resource'</code>
    <context>history for missing resource</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-INSTANCE methods on Patient
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: bad history request should not return a resource</assertion>
  </test>
  <test name="HistoryTest::hi06_all_history_for_resource_with_since_test" id="HI06">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: "Patient", methods: ["history-type"]
        }

        before = @create_date - 1.minute
        after = Time.now.utc + 1.minute

        result = @client.resource_history_as_of(FHIR::Patient,before)
        assert_response_ok result
        entry_ids_are_present_and_absolute_urls(result.resource.entry)
        check_sort_order(result.resource.entry)

        selfs = result.resource.entry.map(&amp;:self_link).compact
        assert_equal result.resource.entry.size, selfs.size, "history with _since does not contain all versions of instance"

        result = @client.resource_history_as_of(FHIR::Patient,after)
        assert_response_ok result
        assert_equal 0, result.resource.total, "Setting since to a future moment still returns history"</code>
    <context>all history for resource with since</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-TYPE methods on Patient
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: history with _since does not contain all versions of instance
Asserts False: Setting since to a future moment still returns history</assertion>
  </test>
  <test name="HistoryTest::hi08_all_history_whole_system_with_since_test" id="HI08">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: nil, methods: ["history-system"]
        }

        before = @create_date - 1.minute
        after = Time.now.utc + 1.minute

        result = @client.all_history_as_of(before)
        assert_response_ok result
        entry_ids_are_present_and_absolute_urls(result.resource.entry)
        check_sort_order(result.resource.entry)

        warning { assert_navigation_links(result.resource) }

        selfs = result.resource.entry.map(&amp;:self_link).compact
        assert_equal result.resource.entry.size, selfs.size, "history with _since does not contain all versions of instance"

        result = @client.resource_history_as_of(FHIR::Patient,after)
        assert_response_ok result
        assert_equal 0, result.resource.total, "Setting since to a future moment still returns history"</code>
    <context>all history whole system with since</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-SYSTEM methods on 
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: history with _since does not contain all versions of instance
Asserts False: Setting since to a future moment still returns history</assertion>
  </test>
  <test name="HistoryTest::hi09_resource_history_page_forward_test" id="HI09">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: "Patient", methods: ["history-type"]
        }

        page_size = 30
        page = @client.history(resource: FHIR::Patient, history: {since: (Time.now.utc - 1.hour), count: page_size})

        forward_count = 0
        # browse forwards
        while page != nil
          assert !page.resource.nil?, "Unable to page forward through results.  A bundle was not returned from the page forward request."
          warning { entry_ids_are_present_and_absolute_urls(page.resource.entry) }
          assert page.resource.entry.count &lt;= page_size, "Server returned a page with more entries than set by _count"
          forward_count += page.resource.entry.count
          page = @client.next_page(page)
        end

        assert forward_count &gt; 2, "there should be at least 2 history entries"</code>
    <context>resource history page forward</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-TYPE methods on Patient
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: Unable to page forward through results.  A bundle was not returned from the page forward request.
Asserts False: Server returned a page with more entries than set by _count
Asserts False: there should be at least 2 history entries</assertion>
  </test>
  <test name="HistoryTest::hi10_resource_history_page_backwards_test" id="HI10">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: "Patient", methods: ["history-type"]
        }

        page_size = 30
        page = @client.history(resource: FHIR::Patient, history: {since: (Time.now.utc - 1.hour), count: page_size})

        forward_count = 0
        last_page = page
        while page != nil
          assert !page.resource.nil?, "Unable to page forward through results.  A bundle was not returned from the page forward request."
          forward_count += page.resource.entry.count
          page = @client.next_page(page)
          last_page = page if page
        end

        backward_count = 0
        page = last_page
        # browse forwards
        while page != nil
          warning { entry_ids_are_present_and_absolute_urls(page.resource.entry) }
          assert page.resource.entry.count &lt;= page_size, "Server returned a page with more entries than set by _count"
          backward_count += page.resource.entry.count
          page = @client.next_page(page, FHIR::Sections::Feed::BACKWARD)
        end

        assert_equal forward_count, backward_count, "entry numbers were different moving forwards and backwards"</code>
    <context>resource history page backwards</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-TYPE methods on Patient
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: Unable to page forward through results.  A bundle was not returned from the page forward request.
Asserts False: Server returned a page with more entries than set by _count
Asserts False: entry numbers were different moving forwards and backwards</assertion>
  </test>
  <test name="HistoryTest::hi11_first_page_full_history_test" id="HI11">
    <code>@resources = Crucible::Generator::Resources.new
        @patient = @resources.example_patient

        @create_date = Time.now.utc

        @version = []
        result = @client.create(@patient)
        @id = result.id
        @version &lt;&lt; result.version

        @patient.telecom &lt;&lt; FHIR::ContactPoint.new(system: 'email', value: 'foo@example.com')

        update_result = @client.update(@patient, @id)
        @version &lt;&lt; update_result.version

        @client.destroy(FHIR::Patient, @id)

        @entry_count = @version.length
        # add one for deletion
        @version_count = @entry_count + 1


         metadata {
          links 'http://www.hl7.org/implement/standards/fhir/http.html#history'
          requires resource: "Patient", methods: ["create", "update", "delete"]
          validates resource: nil, methods: ["history-system"]
        }

        history = @client.all_history
        assert history.resource.entry.size &gt; 2, "there should be at least 2 history entries"</code>
    <context>first page full history</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <assertion>Validates the HISTORY-SYSTEM methods on 
Requires the CREATE,UPDATE,DELETE methods on Patient
Asserts False: there should be at least 2 history entries</assertion>
  </test>
</xs:schema>
