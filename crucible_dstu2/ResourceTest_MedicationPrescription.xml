<xs:schema xmlns:ctl="http://www.occamlab.com/ctl">
  <suite name="ResourceTest_MedicationPrescription">
    <title>ResourceTest_MedicationPrescription</title>
    <starting-test>ResourceTest_MedicationPrescription:base_test</starting-test>
  </suite>
  <test name="ResourceTest_MedicationPrescription::base_test">
    <assertion>base main</assertion>
    <code>
      <call-test>ResourceTest_MedicationPrescription::x000_read_type_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x010_create_new_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x020_read_existing_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x030_update_existing_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x040_read_history_of_existing_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x050_version_read_existing_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x055_previous_version_read_existing_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x060_validate_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x065_validate_existing_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x067_validate_against_a_profile_test</call-test>
      <call-test>ResourceTest_MedicationPrescription::x070_delete_existing_test</call-test>
    </code>
  </test>
  <test name="ResourceTest_MedicationPrescription::x000_read_type_test" id="X000_MedicationPrescription">
    <code>metadata {
          define_metadata('read')
        }

        reply = @client.read_feed(@resource_class)
        @bundle = reply.resource
        assert !@bundle.nil?, 'Service did not respond with bundle.'</code>
    <context>MedicationPrescription: Read Type</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#read</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the READ methods on MedicationPrescription
Asserts False: Service did not respond with bundle.</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x010_create_new_test" id="X010_MedicationPrescription">
    <code>metadata {
          define_metadata('create')
        }

        result = TestResult.new('X010',"Create new #{resource_class.name.demodulize}", nil, nil, nil)
        @temp_resource = ResourceGenerator.generate(@resource_class,3)
        reply = @client.create @temp_resource
        @temp_id = reply.id
        @temp_version = reply.version

        if reply.code==201
          result.update(STATUS[:pass], "New #{resource_class.name.demodulize} was created.", reply.body)
        else
          outcome = self.parse_operation_outcome(reply.body)
          message = self.build_messages(outcome)
          result.update(STATUS[:fail], message, reply.body)
          @temp_resource = nil
        end

        result</code>
    <context>MedicationPrescription: Create New</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#create</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the CREATE methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x020_read_existing_test" id="X020_MedicationPrescription">
    <code>metadata {
          define_metadata('read')
        }

        result = TestResult.new('X020',"Read existing #{resource_class.name.demodulize} by ID", nil, nil, nil)
        if !@bundle.nil? and @bundle.size&gt;0 and !@bundle.get(0).nil?
          @preexisting_id = @bundle.get(0).resource_id
        elsif !@temp_resource.nil?
          @preexisting_id = @temp_id
        else
          return result.update(STATUS[:fail], "Preexisting #{resource_class.name.demodulize} unknown.", nil)
        end

        reply = @client.read(@resource_class, @preexisting_id)
        @preexisting = reply.resource

        if @preexisting.nil?
          return result.update(STATUS[:fail], "Failed to read preexisting #{resource_class.name.demodulize}: #{@preexisting_id}", reply.body)
        end

        @preexisting_version = reply.version

        result.update(STATUS[:pass], "Successfully read preexisting #{resource_class.name.demodulize}.", @preexisting.to_xml)
        result</code>
    <context>MedicationPrescription: Read Existing</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#read</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the READ methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x030_update_existing_test" id="X030_MedicationPrescription">
    <code>metadata {
          define_metadata('update')
        }

        result = TestResult.new('X030',"Update existing #{resource_class.name.demodulize} by ID", nil, nil, nil)

        if !@bundle.nil? and @bundle.size&gt;0 and !@bundle.get(0).nil?
          @preexisting_id = @bundle.get(0).resource_id
          @preexisting = @bundle.get(0).resource    
        elsif !@temp_resource.nil?
          @preexisting_id = @temp_id
          @preexisting = @temp_resource
        else
          return result.update(STATUS[:fail], "Preexisting #{resource_class.name.demodulize} unknown.", nil)
        end

        if @preexisting.nil?
          result.update(STATUS[:fail], "Unable to update -- no existing #{resource_class.name.demodulize} is available or could be created.", nil)
        else
          ResourceGenerator.set_fields!(@preexisting)

          reply = @client.update @preexisting, @preexisting_id

          if reply.code==200
            result.update(STATUS[:pass], "Updated existing #{resource_class.name.demodulize}.", reply.body)
          elsif reply.code==201
            # check created id -- see if it matches the one we used, or is new
            resulting_id = reply.id

            if(@preexisting_id != resulting_id)
              result.update(STATUS[:fail], "Server created (201) new #{resource_class.name.demodulize} rather than update (200). A new ID (#{resulting_id}) was also created (was #{@preexisting_id}).", reply.body)
            else
              result.update(STATUS[:fail], "The #{resource_class.name.demodulize} was successfully updated, but the server responded with the wrong code (201, but should have been 200).", reply.body)
            end

            resulting_version = reply.version
            if(@preexisting_version == resulting_version)
              result.update(STATUS[:fail], "The #{resource_class.name.demodulize} was successfully updated, but the server did not update the resource version number.", reply.body)
            end
          else
            outcome = self.parse_operation_outcome(reply.body)
            message = self.build_messages(outcome)
            result.update(STATUS[:fail], message, reply.body)
          end
        end

        result</code>
    <context>MedicationPrescription: Update Existing</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#update</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the UPDATE methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x040_read_history_of_existing_test" id="X040_MedicationPrescription">
    <code>metadata {
          define_metadata('history')
        }

        result = TestResult.new('X040',"Read history of existing #{resource_class.name.demodulize} by ID", nil, nil, nil)

        if @preexisting_id.nil?
          return result.update(STATUS[:fail], "Preexisting #{resource_class.name.demodulize} unknown.", nil)
        end

        reply = @client.resource_instance_history(@resource_class, @preexisting_id)
        @history_bundle = reply.resource
        if @history_bundle.nil?
          return result.update(STATUS[:fail], 'Service did not respond with bundle.', nil)
        end

        result.update(STATUS[:pass], 'Service responded with bundle.', @history_bundle.raw_xml)
        result</code>
    <context>MedicationPrescription: Read History of existing</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#history</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the HISTORY methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x050_version_read_existing_test" id="X050_MedicationPrescription">
    <code>metadata {
          define_metadata('vread')
        }

        result = TestResult.new('X050',"Version read existing #{resource_class.name.demodulize} by ID", nil, nil, nil)

        if !@history_bundle.nil? and @history_bundle.size&gt;0 and !@history_bundle.get(0).nil?
          @preexisting_id = @history_bundle.get(0).resource_id
          @preexisting_version = @history_bundle.get(0).resource_version
          @preexisting = @history_bundle.get(0).resource    
        elsif !@temp_resource.nil?
          @preexisting_id = @temp_id
          @preexisting_version = @temp_version
          @preexisting = @temp_resource
        else
          return result.update(STATUS[:fail], "Preexisting #{resource_class.name.demodulize} unknown.", nil)
        end

        reply = @client.vread(@resource_class, @preexisting_id, @preexisting_version)

        if reply.resource.nil?
          return result.update(STATUS[:fail], "Server failed to return preexisting #{resource_class.name.demodulize}.", reply.body)
        elsif reply.code != 200
          return result.update(STATUS[:fail], "Server returned preexisting #{resource_class.name.demodulize}, but responded with HTTP#{reply.code}.", nil)
        elsif (reply.id != @preexisting_id) and (reply.version != @preexisting_version)
          return result.update(STATUS[:fail], "Server did not respond with correct information in the content-location header.", nil)
        end

        result.update(STATUS[:pass], "Read current version of preexisting #{resource_class.name.demodulize}.", reply.body)
        result</code>
    <context>MedicationPrescription: Version read existing</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#vread</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the VREAD methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x055_previous_version_read_existing_test" id="X055_MedicationPrescription">
    <code>metadata {
          define_metadata('vread')
        }

        result = TestResult.new('X055',"Previous version read existing #{resource_class.name.demodulize} by ID", nil, nil, nil)

        if !@history_bundle.nil? and @history_bundle.size&gt;1 and !@history_bundle.get(1).nil?
          @preexisting_id = @history_bundle.get(1).resource_id
          @preexisting_version = @history_bundle.get(1).resource_version
          @preexisting = @history_bundle.get(1).resource    
        else
          return result.update(STATUS[:fail], "Previous version of #{resource_class.name.demodulize} unavailable.", nil)
        end

        reply = @client.vread(@resource_class, @preexisting_id, @preexisting_version)

        if reply.resource.nil?
          return result.update(STATUS[:fail], "Server failed to return preexisting #{resource_class.name.demodulize}.", reply.body)
        elsif reply.code != 200
          return result.update(STATUS[:fail], "Server returned preexisting #{resource_class.name.demodulize}, but responded with HTTP#{reply.code}.", nil)
        elsif (reply.id != @preexisting_id) and (reply.version != @preexisting_version)
          return result.update(STATUS[:fail], "Server did not respond with correct information in the content-location header.", nil)
        end
 
        result.update(STATUS[:pass], "Read previous version of preexisting #{resource_class.name.demodulize}.", reply.body)</code>
    <context>MedicationPrescription: Previous version read existing</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#vread</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the VREAD methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x060_validate_test" id="X060_MedicationPrescription">
    <code>metadata {
          define_metadata('validate')
        }

        result = TestResult.new('X060',"Validate #{resource_class.name.demodulize}", nil, nil, nil)

        @temp_resource = ResourceGenerator.generate(@resource_class,3)
        reply = @client.validate @temp_resource

        if reply.code==200
          result.update(STATUS[:pass], "#{resource_class.name.demodulize} was validated.", reply.body)
        elsif reply.code==201
          result.update(STATUS[:fail], "Server created a #{resource_class.name.demodulize} with the ID `_validate` rather than validate the resource.", reply.body)
        else
          outcome = self.parse_operation_outcome(reply.body)
          message = self.build_messages(outcome)
          result.update(STATUS[:fail], message, reply.body)
        end

        result</code>
    <context>MedicationPrescription: Validate</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#validate</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the VALIDATE methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x065_validate_existing_test" id="X065_MedicationPrescription">
    <code>metadata {
          define_metadata('validate')
        }

        result = TestResult.new('X065',"Validate existing #{resource_class.name.demodulize}", nil, nil, nil)

        if !@bundle.nil? and @bundle.size&gt;0 and !@bundle.get(0).nil?
          @preexisting_id = @bundle.get(0).resource_id
          @preexisting = @bundle.get(0).resource    
        elsif !@temp_resource.nil?
          @preexisting_id = @temp_id
          @preexisting = @temp_resource
        else
          return result.update(STATUS[:fail], "Preexisting #{resource_class.name.demodulize} unknown.", nil)
        end

        if @preexisting.nil?
          result.update(STATUS[:fail], "Unable to validate -- no existing #{resource_class.name.demodulize} is available to be validated.", nil)
        else
          ResourceGenerator.set_fields!(@preexisting)

          reply = @client.validate_existing(@preexisting, @preexisting_id)

          if reply.code==200
            result.update(STATUS[:pass], "Existing #{resource_class.name.demodulize} was validated.", reply.body)
          elsif reply.code==201
            result.update(STATUS[:fail], "Server created a #{resource_class.name.demodulize} with the ID `_validate` rather than validate the resource.", reply.body)
          else
            outcome = self.parse_operation_outcome(reply.body)
            message = self.build_messages(outcome)
            result.update(STATUS[:fail], message, reply.body)
          end
        end

        result</code>
    <context>MedicationPrescription: Validate Existing</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#validate</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the VALIDATE methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x067_validate_against_a_profile_test" id="X067_MedicationPrescription">
    <code>metadata {
          define_metadata('validate')
        }

        tag = FHIR::Tag.new
        tag.scheme = "http://hl7.org/fhir/tag/profile"
        tag.term = "http://www.hl7.org/implement/standards/fhir/us-core.profile.xml" # the DSTU1 US profile to be validated
        options = { :category =&gt; [ tag ] }

        result = TestResult.new('X067',"Validate #{resource_class.name.demodulize} against a profile", nil, nil, nil)

        @temp_resource = ResourceGenerator.generate(@resource_class,3)
        reply = @client.validate(@temp_resource,options)

        if reply.code==200
          result.update(STATUS[:pass], "#{resource_class.name.demodulize} was validated.", reply.body)
        elsif reply.code==201
          result.update(STATUS[:fail], "Server created a #{resource_class.name.demodulize} with the ID `_validate` rather than validate the resource.", reply.body)
        else
          outcome = self.parse_operation_outcome(reply.body)
          message = self.build_messages(outcome)
          result.update(STATUS[:fail], message, reply.body)
        end

        result</code>
    <context>MedicationPrescription: Validate against a profile</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#validate</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the VALIDATE methods on MedicationPrescription</assertion>
  </test>
  <test name="ResourceTest_MedicationPrescription::x070_delete_existing_test" id="X070_MedicationPrescription">
    <code>metadata {
          define_metadata('delete')
        }

        result = TestResult.new('X070',"Delete existing #{resource_class.name.demodulize}", nil, nil, nil)

        if !@bundle.nil? and @bundle.size&gt;0 and !@bundle.get(0).nil?
          @preexisting_id = @bundle.get(0).resource_id
          @preexisting = @bundle.get(0).resource    
        elsif !@temp_resource.nil?
          @preexisting_id = @temp_id
          @preexisting = @temp_resource
        else
          return result.update(STATUS[:fail], "Preexisting #{resource_class.name.demodulize} unknown.", nil)
        end

        reply = @client.destroy(@resource_class,@preexisting_id)

        if reply.code==204
          result.update(STATUS[:pass], "Existing #{resource_class.name.demodulize} was deleted.", reply.body)
        elsif reply.code==405
          outcome = self.parse_operation_outcome(reply.body)
          message = self.build_messages(outcome)
          message.unshift "Server does not allow deletion of #{resource_class.name.demodulize}"
          result.update(STATUS[:fail], message, reply.body)
        elsif reply.code==404
          outcome = self.parse_operation_outcome(reply.body)
          message = self.build_messages(outcome)
          message.unshift "Server was unable to find (404 not found) the #{resource_class.name.demodulize} with the ID `#{preexisting_id}`"
          result.update(STATUS[:fail], message, reply.body)
        elsif reply.code==409
          outcome = self.parse_operation_outcome(reply.body)
          message = self.build_messages(outcome)
          message.unshift "Server had a conflict try to delete the #{resource_class.name.demodulize} with the ID `#{preexisting_id}"
          result.update(STATUS[:fail], message, reply.body)
        else
          outcome = self.parse_operation_outcome(reply.body)
          message = self.build_messages(outcome)
          result.update(STATUS[:fail], message, reply.body)
        end
   
        result</code>
    <context>MedicationPrescription: Delete Existing</context>
    <link>http://www.hl7.org/implement/standards/fhir/http.html#delete</link>
    <link>http://www.hl7.org/implement/standards/fhir/medicationprescription.html</link>
    <assertion>Validates the DELETE methods on MedicationPrescription</assertion>
  </test>
</xs:schema>
